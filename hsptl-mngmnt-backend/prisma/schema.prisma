generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  email      String       @unique
  name       String?
  password   String
  role       Role         @default(STAFF)
  cert       Certificate?
  products   Product[]
  orders     Orders[]
  invoice    Invoice[]    @relation(fields: [invoice_id], references: [id])
  invoice_id String[]     @db.ObjectId
  vehicle    Vehicle[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Orders {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  products     Json
  account      Account?  @relation(fields: [account_id], references: [id])
  destination  String
  account_id   String?   @db.ObjectId
  shippment    Shipment? @relation(fields: [shippment_id], references: [id])
  shippment_id String?   @db.ObjectId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Shipment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orders      Orders[] @relation(fields: [], references: [])
  orders_id   String[] @db.ObjectId
  description String?
  start       DateTime
  end         DateTime
  destination String
  vehicle     Vehicle?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Certificate {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  issued_by    String
  issueDate    DateTime
  expiryDate   DateTime?
  document_url String?
  status       CertStatus
  account      Account?   @relation(fields: [account_id], references: [id])
  account_id   String?    @unique @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Product {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  price      Float
  stocks     Int
  account    Account? @relation(fields: [account_id], references: [id])
  account_id String?  @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Vehicle {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String?
  driver_name  String
  plate_no     String?
  status       VehicleStatus @default(AVAILABLE)
  account      Account?      @relation(fields: [account_id], references: [id])
  account_id   String?       @unique @db.ObjectId
  shippment    Shipment?     @relation(fields: [shippment_id], references: [id])
  shippment_id String?       @unique @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}


model Invoice {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  amount     Float
  status     InvoiceStatus
  issueDate  DateTime      @default(now())
  account    Account[]     @relation(fields: [account_id], references: [id])
  account_id String[]      @db.ObjectId
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}


enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

enum VehicleStatus {
  AVAILABLE
  RESERVED
  IN_USE
  MAINTENANCE
}

enum CertStatus {
  VALID
  EXPIRED
  PENDING
}

enum Role {
  STAFF
  VENDOR
}
